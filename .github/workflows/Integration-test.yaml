# .github/workflows/user-service-test.yml

name: User Service Tests

# This workflow runs on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use a standard Ubuntu environment

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest version of the checkout action

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4 # Use the latest version of the setup-node action
        with:
          node-version: '20.x' # Specify the Node.js version you want to use (e.g., 20.x, lts/*)

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci # Use 'npm ci' which is recommended for CI/CD environments

      # Step 4: Ensure cross-env and jest binaries are executable
      # This step is added based on previous pipeline issues

      - name: Ensure cross-env is executable # <--- ADD THIS STEP
        run: chmod +x node_modules/.bin/cross-env
        shell: bash # Explicitly use bash, as the error mentioned 'sh'

      - name: Ensure jest is executable
        run: chmod +x node_modules/.bin/jest
        shell: bash
        
      # Step 5: Run your tests
      - name: Run User Service Tests
        run: npm test # Assumes you have a 'test' script in your package.json (e.g., "test": "cross-env ... jest ...")
        env: # Set environment variables required by your tests and app
          # Pass Supabase test credentials from GitHub Secrets
          SUPABASE_TEST_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_TEST_KEY: ${{ secrets.SUPABASE_TEST_KEY }}
          # Set the test port (must match the port your test file attempts to use)
          TEST_USER_SERVICE_PORT: 4001 # Ensure this matches the default or env var in your test file
          # Add any other environment variables your app or tests rely on
          PROPERTIES_SERVICE_URL: http://localhost:9999

      # Optional: If your tests generate a report, you can upload it
      # - name: Upload test results
      #   if: always() # Upload even if tests fail
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-results
      #     path: ./test-results.xml # Adjust path if you configure Jest to output JUnit reports